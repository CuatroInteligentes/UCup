#include <OneWire.h>

//VARIABLES ARE DECLARED HERE////////////////////////////////////////

byte power_led = 5;
byte wifi_led = 11;
byte temp_led = 7;

bool is_wifi = 0;
boolean new_data = false;

const byte num_ch = 4;
char rec_dat[num_ch];   // an array to store the received data

OneWire  ds(2);

//FUNCTIONS ARE DECLARED HERE////////////////////////////////////////

//void(* resetFunc) (void) = 0;

void rec() {
  static byte ndx = 0;
  char endMarker = '\n';
  char rc;

  while (Serial.available() > 0 && new_data == false) {
    rc = Serial.read();

    if (rc != endMarker) {
      rec_dat[ndx] = rc;
      ndx++;
      if (ndx >= num_ch) {
        ndx = num_ch - 1;
      }
    }
    else {
      rec_dat[ndx] = '\0'; // terminate the string
      ndx = 0;
      new_data = true;
    }
  }
}

//SETUP//////////////////////////////////////////////////////////////

void setup(void) {
  
  Serial.begin(115200);

  //Wifi led
  pinMode(power_led, OUTPUT);
  digitalWrite(power_led, HIGH);
  pinMode(wifi_led, OUTPUT);
  digitalWrite(wifi_led, LOW);
  pinMode(temp_led, OUTPUT);
  digitalWrite(temp_led, LOW);

//  resetFunc();

}

//LOOP///////////////////////////////////////////////////////////////

void loop(void) {

  //COMMAND DECLARING PART/////////////////////////////////////////////

  rec();

  if (!is_wifi) {
    if (rec_dat[0] == 'n' && rec_dat[1] == 'w' && rec_dat[2] == 'c') {
      digitalWrite(wifi_led, HIGH);
      delay(50);
      digitalWrite(wifi_led, LOW);
      new_data = false;
    }

    if (rec_dat[0] == 'w' && rec_dat[1] == 'i' && rec_dat[2] == 'c') {
      digitalWrite(wifi_led, HIGH);
      is_wifi = 1;
      new_data = false;
    }
  }

  if (rec_dat[0] == 't' && rec_dat[1] == 'i' && rec_dat[2] == 'c') {
    digitalWrite(temp_led, HIGH);
    new_data = false;
  }


  //TEMPERATURE PROCESSING PART////////////////////////////////////////

  byte present = 0;
  byte data[12];
  byte addr[8];
  float celsius;

  if ( !ds.search(addr)) {
    ds.reset_search();
    return;
  }


  ds.reset();
  ds.select(addr);
  ds.write(0x44);

  delay(700);


  present = ds.reset();
  ds.select(addr);
  ds.write(0xBE);


  for (byte i = 0; i < 9; i++) {
    data[i] = ds.read();
  }



  int16_t raw = (data[1] << 8) | data[0];
  byte cfg = (data[4] & 0x60);

  if (cfg == 0x00) raw = raw & ~7;
  else if (cfg == 0x20) raw = raw & ~3;
  else if (cfg == 0x40) raw = raw & ~1;

  //Temperature check
  //Serial.println((float)raw / 16.0);

  byte temp = (byte)(raw / 16.0);
  if ((temp >= 0) && (temp <= 100)) Serial.write(temp);
}